# Learn-Haskell
Learning Haskell at SPRINT3R

1. Hello

Compile and Executable
```
$ghc -o hello hello.hs
```

* Run in GHCi
Prelude> :load hello.hs

Prelude> :reload

* Add function 
f x = 2*x + 1

Prelude> f 5
11

* Haskell is type reference 
Prelude> :t 5
5 :: Num a => a

Prelude> :t (+)
(+) :: Num a => a -> a -> a
Num a = a คือ type ในกลุ่มของ number เป็น int, float ก็ได้
a ตัวสุดท้ายคือ output

Prelude> :t (^)
(^) :: (Integral b, Num a) => a -> b -> a

Tutple


* List
tail [1,2,3,4,5]
[2,3,4,5]

take 2 [1,2,3,4,5]
[1,2]

[1..5]
[1,2,3,4,5]

[1..]  // infinity list

head [1..] //Lazy evaluation
1

take 5 [1..] //Lazy evaluation
[1,2,3,4,5]


take 5 [1,3 .. 10] 
[1,3,5,7,9]

take 5 [1,3 ..]
[1,3,5,7,9]

[1,(-2) ..]
[1,-2,-5,-8,-11]

length [1,2,3,4,5]
5

init [1,2,3,4,5]
[1,2,3,4]

ประกาศ function ใน ghci ต้องใช้ let ในการประกาศเสมอ
ส่วนใน file hs ไม่ต้องใช้

let f x y = x^2 + y^2

f 2 2
8

f 2 3
13

List comprehension
https://en.wikipedia.org/wiki/List_comprehension

[x | x<- [1..5]]
list ของ x 
โดยใน x นำค่ามาจาก list ของ 1 ถึง 5




