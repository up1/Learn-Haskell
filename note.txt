# Learn-Haskell
Learning Haskell at SPRINT3R

1. Hello

Compile and Executable
```
$ghc -o hello hello.hs
```

* Run in GHCi
Prelude> :load hello.hs

Prelude> :reload

* Add function 
f x = 2*x + 1

Prelude> f 5
11

* Haskell is type reference 
Prelude> :t 5
5 :: Num a => a

Prelude> :t (+)
(+) :: Num a => a -> a -> a
Num a = a คือ type ในกลุ่มของ number เป็น int, float ก็ได้
a ตัวสุดท้ายคือ output

Prelude> :t (^)
(^) :: (Integral b, Num a) => a -> b -> a

* Tuple
student :: String -> Int -> (String, Int)
student name age = (name, age)

* List
tail [1,2,3,4,5]
[2,3,4,5]

take 2 [1,2,3,4,5]
[1,2]

[1..5]
[1,2,3,4,5]

[1..]  // infinity list

head [1..] //Lazy evaluation
1

take 5 [1..] //Lazy evaluation
[1,2,3,4,5]


take 5 [1,3 .. 10] 
[1,3,5,7,9]

take 5 [1,3 ..]
[1,3,5,7,9]

[1,(-2) ..]
[1,-2,-5,-8,-11]

length [1,2,3,4,5]
5

init [1,2,3,4,5]
[1,2,3,4]

ประกาศ function ใน ghci ต้องใช้ let ในการประกาศเสมอ
ส่วนใน file hs ไม่ต้องใช้

let f x y = x^2 + y^2

f 2 2
8

f 2 3
13

List comprehension
https://en.wikipedia.org/wiki/List_comprehension

[x | x<- [1..5]]
list ของ x 
โดยใน x นำค่ามาจาก list ของ 1 ถึง 5

[x | x<- [1..5]]
[1,2,3,4,5]

[(x,y) | x<- [1..5], y <- [10..15]]
[(1,10),(1,11),(1,12),(1,13),(1,14),(1,15),(2,10),(2,11),(2,12),(2,13),(2,14),(2,15),(3,10),(3,11),(3,12),(3,13),(3,14),(3,15),(4,10),(4,11),(4,12),(4,13),(4,14),(4,15),(5,10),(5,11),(5,12),(5,13),(5,14),(5,15)]

[(x,y) | x<- [1..5], y <- [1..]]

Add filter
x ที่หาร 3 ลงตัว
[x | x<- [1..20], x `mod` 3 == 0]

mod มันเป็น เป็น function prefix operator
mod 10 3

5 + 3 //infix
(+) 5 3 // prefix

Example of filter
[(x,y) | x <- [1..100], y <- [1..100], x == y^2]
[(1,1),(4,2),(9,3),(16,4),(25,5),(36,6),(49,7),(64,8),(81,9),(100,10)]

Example to add or operator
[(x,y) | x <- [1..100], y <- [-100..10], x + y == 0 || x>0]

* Type ของ or
:t or
or :: Foldable t => t Bool -> Bool

:info or
or :: Foldable t => t Bool -> Bool  -- Defined in ‘Data.Foldable’

Lab recursion

ps.
ถ้าสร้าง function ซ้ำกับของที่มีให้ใช้ (') ต่อท้ายเช่น sum'


Haskell programming guideline
https://wiki.haskell.org/Programming_guidelines

Fibonacci
https://en.wikipedia.org/wiki/Fibonacci_number


Pattern matching

let (x,y) = (10,20)
let [x, y, z] = [1, 2, 3]

List มันคือ recusive นั่นเอง
เริ่มจาก list ว่าง

[]
1:[]
1:2:[]
1:2:3:[]

ดังนั้นสามารถเขียน pattern ได้ดังนี้
>let x:[] = [1]

>:t
(:) :: a -> [a] -> [a]

ว่าด้วยเรื่องของ pattern matching 
พยายามทำให้สองข้างเท่ากัน
>let x:xs = [1]
>xs
[]

>let x:xs = [1,2,3]
>xs
[2,3]

*** Immutable by default ***

//Lab
(x:xs) = [1,2,3,4]
>x
1
> xs
[2,3,4]

> let x2:xs2 = xs
> x2
2

> xs2
[3,4]

> let x3:xs3 = xs2
> x3
3

> xs3
[4]


ช่วงบ่าย
คูณสองแต่ละตัวใน list โดยใช้ list comprehensive และ pattern matching แทน

doubleAll :: [Int] -> [Int]
doubleAll [] = []
doubleAll (x:xs) = (x * 2) : doubleAll xs

> doubleAll [1,2]
[2,4]

ยกกำลังสอง
powerAll :: [Int] -> [Int]
powerAll [] = []
powerAll (x:xs) = (x^2) : powerAll xs

> powerAll [1,2,3]
[1,4,9]

จาก workshop ต่างกันเพียง * และ ยกกำลัง ?
มันคือ duplication code !!
ดังนั้นสามารถส่ง function as parameter ได้เลย
หรือ high order function

map' f [] = []
map' f (x:xs) = f x : map' f xs


การเรียกใช้งานแบบ anomymous function
> map' (\x -> x*2) [1,2,3]
[2,4,6]


ลองเรียกใช้ function ตรง ๆ
double x = x * 2
> map' double [1,2,3]
[2,4,6]


Refactoring with High order function
-- High order function
map' f [] = []
map' f (x:xs) = f x : map' f xs

double x = x*2
power x = x^2

doubleAll xs = map' double xs
powerAll xs = map' power xs


Compose function :: Lab05
เอา function มารวมเพื่อสร้าง function ใหม่

>let ds = compose power double
> ds 10
400

> :t (.)
(.) :: (b -> c) -> (a -> b) -> a -> c

สร้งสัญลักษ์ใช้เอง
(|>) g f = f.g

> (double |> power) 10
400

About curry
ทุก function ใน haskell รับเพียง 1 ค่า
แล้วส่ง output ออกไป
Int -> Int ->Int
Int -> (Int -> Int)

ถ้าใส่เพียงค่าเดียว
สิ่งที่ return ออกมา คือ function (Int->Int) ออกมาให้เสมอ
เช่น

(+) 2  => คือ function
((+) 2) 5 => 7 คือ 2 + 5 นะ

>(+2) => function

> ((-)5) 10
-5

> negate 5
-5


Apply (*2) ให้ map'
> map' (*2) [1,2,3]
[2,4,6]


Try curry with powerAll and doubleAll
map' f [] = []
map' f (x:xs) = f x : map' f xs

doubleAll'  = map' (*2)
powerAll' = map'(^2)

> doubleAll' [1,2,3]
[2,4,6]
> powerAll' [1,2,3]
[1,4,9]






Resources
http://learnyouahaskell.com/